import { Collection } from '../collection';
import type { Db } from '../db';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
<<<<<<< HEAD
import { AbstractOperation, type OperationOptions } from './operation';
=======
import type { Callback } from '../utils';
import { AbstractCallbackOperation, type OperationOptions } from './operation';
>>>>>>> 7e7feca6fa3c92e6242233d08162b91bde293e42

export interface CollectionsOptions extends OperationOptions {
  nameOnly?: boolean;
}

/** @internal */
<<<<<<< HEAD
export class CollectionsOperation extends AbstractOperation<Collection[]> {
=======
export class CollectionsOperation extends AbstractCallbackOperation<Collection[]> {
>>>>>>> 7e7feca6fa3c92e6242233d08162b91bde293e42
  override options: CollectionsOptions;
  db: Db;

  constructor(db: Db, options: CollectionsOptions) {
    super(options);
    this.options = options;
    this.db = db;
  }

<<<<<<< HEAD
  override get commandName() {
    return 'listCollections' as const;
  }

  override async execute(
    server: Server,
    session: ClientSession | undefined
  ): Promise<Collection[]> {
    // Let's get the collection names
    const documents = await this.db
=======
  override executeCallback(
    server: Server,
    session: ClientSession | undefined,
    callback: Callback<Collection[]>
  ): void {
    // Let's get the collection names
    this.db
>>>>>>> 7e7feca6fa3c92e6242233d08162b91bde293e42
      .listCollections(
        {},
        { ...this.options, nameOnly: true, readPreference: this.readPreference, session }
      )
<<<<<<< HEAD
      .toArray();
    const collections: Collection[] = [];
    for (const { name } of documents) {
      if (!name.includes('$')) {
        // Filter collections removing any illegal ones
        collections.push(new Collection(this.db, name, this.db.s.options));
      }
    }
    // Return the collection objects
    return collections;
=======
      .toArray()
      .then(
        documents => {
          const collections = [];
          for (const { name } of documents) {
            if (!name.includes('$')) {
              // Filter collections removing any illegal ones
              collections.push(new Collection(this.db, name, this.db.s.options));
            }
          }
          // Return the collection objects
          callback(undefined, collections);
        },
        error => callback(error)
      );
>>>>>>> 7e7feca6fa3c92e6242233d08162b91bde293e42
  }
}
